// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// prox_lasso
Rcpp::NumericVector prox_lasso(Rcpp::NumericVector& u, int& dim_u, int& unreg_p, double& tau_lam);
RcppExport SEXP _free_prox_lasso(SEXP uSEXP, SEXP dim_uSEXP, SEXP unreg_pSEXP, SEXP tau_lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type u(uSEXP);
    Rcpp::traits::input_parameter< int& >::type dim_u(dim_uSEXP);
    Rcpp::traits::input_parameter< int& >::type unreg_p(unreg_pSEXP);
    Rcpp::traits::input_parameter< double& >::type tau_lam(tau_lamSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_lasso(u, dim_u, unreg_p, tau_lam));
    return rcpp_result_gen;
END_RCPP
}
// REE_KM
Rcpp::List REE_KM(Rcpp::NumericVector& beta, int p, int reg_p, Rcpp::Function& U, double tau, double alpha, std::string penalty, double lambda1, int maxit, double tol_U, double tol_beta, bool verbose);
RcppExport SEXP _free_REE_KM(SEXP betaSEXP, SEXP pSEXP, SEXP reg_pSEXP, SEXP USEXP, SEXP tauSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP lambda1SEXP, SEXP maxitSEXP, SEXP tol_USEXP, SEXP tol_betaSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type reg_p(reg_pSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function& >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol_U(tol_USEXP);
    Rcpp::traits::input_parameter< double >::type tol_beta(tol_betaSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(REE_KM(beta, p, reg_p, U, tau, alpha, penalty, lambda1, maxit, tol_U, tol_beta, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_free_prox_lasso", (DL_FUNC) &_free_prox_lasso, 4},
    {"_free_REE_KM", (DL_FUNC) &_free_REE_KM, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_free(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
